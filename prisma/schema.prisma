generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Messages (IRC events, could be things like join/quit etc)
model Message {
  id Int @id @default(autoincrement())

  target String // channel, or origin user if direct message
  nick   String

  type    String // irc command, e.g. 'message' 'action'
  content String // msg text value, but could be whatever if other cmds added

  self Boolean // we did this

  time   DateTime @default(now())
  mask   String // just user@host
  server String

  tag Tag[]
}

// Conditions to trigger a response
model Route {
  id Int @id @default(autoincrement())

  server String // * = any or irc.server.org
  target String // # = any channel, ? = any query (ie. pm), * = any target

  keyword           String? // e.g. "@bot", or %nick
  startsWithKeyword Boolean @default(true)
  mentionsKeyword   Boolean @default(false)

  handler String // the function used to respond to event

  overrideOutputTarget String? // output to this target instead

  // the ai profile data to send to handler along with message
  profile   Profile? @relation(fields: [profileID], references: [id])
  profileID String?

  model   Model?  @relation(fields: [modelID], references: [id])
  modelID String?
}

// Prompt / Persona
model Profile {
  id         String  @id // 'bart', 'eee'
  prompt     String // "system" block
  promptTail String? // "system" block inserted after last user message

  // our opts
  conversationLength Int     @default(10) // include messages tagged with this profile
  contextualLength   Int     @default(0) // include unrelated recent messages
  characterName      String? // substitue bot's nick with this value

  route Route[]
}

// Interaction? Result? Response?
// Genrally denotes previous interaction by Persona
// Can store arbitrary data I never seem to
// Could almost just be a field on Messages but might be faster / useful one day
model Tag {
  id        Int     @id @default(autoincrement())
  message   Message @relation(fields: [messageID], references: [id])
  messageID Int

  key   String
  value String?

  @@unique([messageID, key])
}

model Model {
  id  String @id // identifier for this model + parameter combination eg. openai.turbo, openrouter.nous
  url String // relevant endpoint eg. 'https://api.openai.com/v1/chat/completions' | 'https://openrouter.ai/api/v1/chat/completions'

  parameters String // JSON

  route Route[]
}

// OpenAI/OpenRouter Chat Parameters
// model             String
// max_tokens        Int    @default(128)
// temperature       Float  @default(1)
// top_p             Int    @default(1)
// n                 Int    @default(1)
// stop              String @default("[]")
// presence_penalty  Float  @default(0)
// frequency_penalty Float  @default(0)
// logit_bias        String @default("{}")
// // OpenRouter only
// top_k      Int    @default(0)
// transforms String @default("[\"middle-out\"]")

// OpenAI Image Parameters
//  n               Int    @default(1)
//  size            String @default("1024x1024")
//  response_format String @default("b64_json") // or "url"

// Options
model Options {
  options           String @id @default("options") // there can only be one
  moderationProfile String @default("[]") // categories to allow 

  outputFileURLTemplate  String @default("") // eg "web.site/%.txt"
  outputFileDir          String @default("output")
  outputFilenameIDLength Int    @default(3) // i.e. 3 = abc.txt
  outputIRCMaxNewlines   Int    @default(4)
  outputIRCMaxChars      Int    @default(440)

  apiTimeoutMs Int @default(20000)
}

// output filter
model WordList {
  word String @id // the word/phrase
}
