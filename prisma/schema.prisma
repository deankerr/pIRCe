generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Messages (IRC events, could be things like join/quit etc)
model Message {
  id Int @id @default(autoincrement())

  target String // channel, or origin user if direct message
  nick   String

  type    String // irc command, e.g. 'message' 'action'
  content String // msg text value, but could be whatever if other cmds added

  self Boolean // we did this

  time   DateTime @default(now())
  mask   String // just user@host
  server String

  tag Tag[]
}

// Interaction? Result? Response? MetaTag MemoryTag
// Genrally denotes previous interaction by Persona
// Can store arbitrary data I never seem to
// Could almost just be a field on Messages but might be faster / useful one day
model Tag {
  id        Int     @id @default(autoincrement())
  message   Message @relation(fields: [messageID], references: [id])
  messageID Int

  key   String
  value String?

  @@unique([messageID, key])
}

model Handler {
  id Int @id @default(autoincrement())

  // Trigger
  allowChannel   Boolean @default(true)
  allowQuery     Boolean @default(false)
  restrictServer String? // irc.libera.chat
  restrictTarget String? // #channel-name
  restrictAdmin  Boolean @default(false)
  triggerWord    String? // REQUIRED $command, weather, __NICK__,
  triggerType    String  @default("command") // command | mention | anything

  // Action
  feature   String? // function
  profile   Profile? @relation(fields: [profileID], references: [id])
  profileID Int?

  // Output
  overrideOutputTarget String? // #channel-name
}

// Prompt / Persona
model Profile {
  id      Int @id @default(autoincrement())
  version Int @default(0) // used with id for metatag memory (versioning/erasure)

  label       String  @unique // friendly name
  description String?

  parameters String @default("{}") // JSON, temp, top_p etc.

  model      Model?  @relation(fields: [modelID, platformID], references: [id, platformID])
  modelID    String?
  platformID String?

  // Chat 
  mainPrompt        String? // "system" / instructions
  examplePrompt     String? // JSON? allow examples or fake messages to always follow instructions
  postPrompt        String? // inserted after/just before last message
  postPromptOffset  Int? // 0 = last, 1 = just before last, etc.
  // Chat Options
  maxHistoryLength  Int? // max messages
  maxLocalIRCLength Int? // max unrelated ambient irc messages
  // character name? image?

  handler Handler[]
}

model Model {
  id          String // value passed to API: "gpt-3.5-turbo" / nousresearch/nous-hermes-llama2-13b / "SG161222/Realistic_Vision_V3.0_VAE"
  label       String? // friendly name
  description String?

  platform   Platform @relation(fields: [platformID], references: [id])
  platformID String

  feature      String // chat / image
  promptFormat String // openai/alpacca (variants?)
  // future: parameters available 
  // description, stats, cost? pulled from api
  // max context size
  profile      Profile[]

  @@id([id, platformID])
}

// Essentially refers to handler functions existing for these services
model Platform {
  id     String  @id // openai / openrouter / togetherai
  label  String // OpenAI / OpenRouter / TogetherAI
  apiKey String? // can also use .env
  model  Model[]
}

// Options
model Options {
  options           String @id @default("options") // there can only be one
  moderationProfile String @default("[]") // categories to allow 

  outputFileURLTemplate  String @default("") // eg "web.site/%.txt"
  outputFileDir          String @default("output")
  outputFilenameIDLength Int    @default(3) // i.e. 3 = abc.txt
  outputIRCMaxNewlines   Int    @default(4)
  outputIRCMaxChars      Int    @default(440)

  apiTimeoutMs Int @default(30000)

  appName String @default("pIRCe") // for API headers
  appURL  String @default("http://pirce.dev")
}

// just move into options
// output filter
model WordList {
  word String @id // the word/phrase
}
